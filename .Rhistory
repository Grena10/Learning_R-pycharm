summary(glm.fit)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
length(data)
train_index = 1:length(Weekly)
train_index <- train_index[-1]
train_index <- train_index[-3]
for (i in 1:length(data)){
train_index = 1:length(Weekly)
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.err = pred.err + glm.pred
}
pred.err = 0
for (i in 1:length(data)){
train_index = 1:length(Weekly)
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.err = pred.err + glm.pred
}
err = pred.err/(length(data)-1)
n = length(data)
pred.cor = 0
for (i in 1:n){
train_index = 1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
}
err = (n - pred.cor)/n
summary(glm.fit)
x = rnorm(100)
set.seed(1)
x = rnorm(100)
y=x - 2*x^2 + rnorm(100)
set.seed(1)
x = rnorm(100)
y=x - 2*x^2 + rnorm(100)
error  <- rep(0,n)
err <- rep(0,n)
?rep
n = length(data)
err <- rep(0,n)
library(ISLR)
names(Weekly)
summary(Weekly)
attach(Weekly)
data = Weekly
n = length(data)
err <- rep(0,n)
n = length(data[1])
n = dim(data[1])
n = dim(data)[1]
err <- rep(0,n)
n = dim(data)[1]
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
if (glm.pred == 0)
err[i] <- 1
}
sum(err)
n
for (i in 1:n){
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
if (glm.pred == 0)
err[i] <- 1
}
train_index <-  1:n
n = dim(data)[1]
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
cat(summary(glm.fit))
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
if (glm.pred == 0)
err[i] <- 1
}
n = dim(data)[1]
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
cat(summary(glm.fit))
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
if (glm.pred == 0)
err[i] <- 1
}
source('C:/Users/grena/PycharmProjects/Learning_R-pycharm/Lab5 - resampling.R')
sum(err)
n = dim(data)[1]
n = dim(data)[1]
n = dim(data)[1]
cat("\014")
)
n = dim(data)[1]
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
cat(summary(glm.fit))
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
if (glm.pred == 0)
err[i] <- 1
}
n = dim(data)[1]
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
cat(i)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
pred.cor = pred.cor + glm.pred
if (glm.pred == 0)
err[i] <- 1
}
n = dim(data)[1]
err <- rep(0,n)
for (i in 1:n){
train_index <-  1:n
train_index <- train_index[-i]
test_index <- i
X_train <- data[train_index, -9]
y_train <- data[train_index, 9]
X_test <- data[test_index, -9]
y_test <- data[test_index, 9]
glm.fit=glm(Direction~Lag1 + Lag2, data = Weekly, family=binomial,
subset = train_index)
summary(glm.fit)
cat(i)
glm.probs=predict(glm.fit,X_test,type="response")
glm.pred = 0
glm.pred[glm.probs > 0.5] = 1
if (glm.pred == 0)
err[i] <- 1
}
sum(err)
sum(err)/n
set.seed(1)
x = rnorm(100)
y=x - 2*x^2 + rnorm(100)
mean(err)
plot(x,y)
#cross-validation
library (boot )
#cross-validation
library(boot)
set.seed(3)
x <-  rnorm(100)
y <- x - 2*x^2 + rnorm(100)
df <-  as.data.frame(x,y)
cv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y ~ poly(x,i),data = df)
cv.error[i]=cv.glm(df,glm.fit)$delta[1]
}
cv.error
i=2
glm.fit=glm(y ~ poly(x,i),data = df)
View(glm.fit)
set.seed(3)
x <-  rnorm(100)
y <- x - 2*x^2 + rnorm(100)
df <-  as.data.frame(x,y)
i=2
glm.fit=glm(y ~ poly(x,i),data = df)
cv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y ~ poly(x,i),data = df)
# cv.error[i]=cv.glm(df,glm.fit)$delta[1]
}
i=2
glm.fit=glm(y ~ poly(x,i),data = df)
cv.err = cv.glm(data,glm.fit)
fit.glm.1 <- glm(y ~ x)
cv.glm(Data, fit.glm.1)$delta[1]
i=2
glm.fit=glm(y ~ poly(x,i),data = df)
cv.err = cv.glm(df, glm.fit)
glm.fit=glm(y ~ poly(x,i))
cv.err = cv.glm(df, glm.fit)
glm.fit=glm(y ~ x)
cv.err = cv.glm(df, glm.fit)
cv.err = cv.glm(df, glm.fit)$delta[1]
set.seed(3)
x <-  rnorm(100)
y <- x - 2*x^2 + rnorm(100)
df <-  as.data.frame(x,y)
glm.fit=glm(y ~ x)
cv.err = cv.glm(df, glm.fit)$delta[1]
View(df)
df <-  as.data.frame(c(x,y))
View(df)
df <-  as.data.frame(cbind(x,y))
View(df)
glm.fit=glm(y ~ x)
cv.err = cv.glm(df, glm.fit)$delta[1]
cv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y ~ poly(x,i),data = df)
cv.error[i] = cv.glm(df,glm.fit)$delta[1]
}
cv.error
set.seed(8)
x <-  rnorm(100)
y <- x - 2*x^2 + rnorm(100)
df <-  as.data.frame(cbind(x,y))
cv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y ~ poly(x,i),data = df)
cv.error[i] = cv.glm(df,glm.fit)$delta[1]
}
cv.error
View(glm.fit)
#Boston library
library(MASS)
library(MASS)
attach(Boston)
names(Boston)
pacman::p_load(pacman, psych)
p_help(psych, web = F)  # Opens help in R Viewer
mean(medv)
sd(mean)
describe(mean)
describe(medv)
n= length(Boston)
library(MASS)
attach(Boston)
names(Boston)
pacman::p_load(pacman, psych)
mean(medv)
sd(mean)
describe(medv)
n= length(Boston)
n= dim(Boston)
n= dim(Boston)[1]
sd(Boston)
sd(medv)
sd(medv)/sqrt(n)
se(medv)
describe(medv)$se
attach(Boston)
summary(Boston)
dim(Boston)
dim_Boston <- dim(Boston)
df = Boston[index]
index <- 1:10
df = Boston[index]
View(df)
df = Boston[,index]
index <- 1:10
df = Boston[,index]
View(df)
A=matrix(1:16,4,4)
View(A)
A[,1:2]
A[1:3,]
df = Boston[index,]
describe(df$medv)$se
describe(medv)$se
View(df)
plot(medv)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)
curve(dnorm(medv, mean = mean(medv), sd = sd(medv)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),
col = "red",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)
describe(medv)
mean(medv)
sd = sd(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),
col = "red",  # Color of curve
lwd = 2)
#add = TRUE)
curve(dnorm(x, 22, 9))
x <- rnorm(1000)
curve(dnorm(x, 22, 9))
w<-rnorm(1000)
hist(w,col="red",freq=F,xlim=c(-5,5))
curve(dnorm(w),-5,5,add=T,col="blue")
curve(dnorm(w),-5,5,add=T,col="blue")
curve(dnorm,-5,5,add=T,col="blue")
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = TRUE)
w<-rnorm(1000)
hist(w,col="red",freq=F,xlim=c(-5,5))
curve(dnorm,-5,5,add=T,col="blue")
hist(medv)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),0,50
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = TRUE)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = TRUE)
curve(dnorm(x, mean = mean(medv), sd = sd(medv)),0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = F)
?dnorm
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*10,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = F)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*100,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = F)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*100,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = F)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*100,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*1000,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*10000,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*5000,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*2000,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*3000,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
hist(medv)
curve(dnorm(x, mean = mean(medv), sd = sd(medv))*4000,0,50,
col = "red",  # Color of curve
lwd = 2,          # Line width of 2 pixels
add = T)
boot.fh(Boston,1:n)
boot.fn=function(data,index){
df = data[index]
return(describe(df$medv)$se)
}
boot.fh(Boston,1:n)
boot.fn(Boston,1:n)
boot.fn=function(data,index){
df = data[index,]
return(describe(df$medv)$se)
}
boot.fn(Boston,1:n)
boot(Boston,boot.fn,1000)
boot.fn(Boston,1:n)
boot.mean.fn=function(data,index){
df = data[index,]
return(mean(df$medv))
}
boot.mean.fn(Boston,1:n)
boot(Boston,boot.mean.fn,1000)
k <- boot(Boston,boot.mean.fn,1000)
View(k)
k$t0
k$t
?boot
sd(k$t)
mean.m <- k$t0
se.m <- sd(k$t)
mean.m - se.m
mean.m - 2*se.m
mean.m + 2*se.m
t.test(Boston$medv)
median(Boston$medv)
boot.med.fn=function(data,index){
df = data[index,]
return(median(df$medv))
}
boot.med.fn(Boston,1:n)
k <- boot(Boston,boot.med.fn,1000)
View(k)
boot(Boston,boot.med.fn,1000)
?quantile()
quantile(medv, c(0.1))
boot(Boston,boot.fn01,1000)
boot.fn01=function(data,index){
df = data[index,]
return (quantile(df$medv, c(0.1)))
}
boot(Boston,boot.fn01,1000)
debug(boot.fn01)
boot(Boston,boot.fn01,1000)
